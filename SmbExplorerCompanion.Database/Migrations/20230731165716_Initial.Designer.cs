// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmbExplorerCompanion.Database;

#nullable disable

namespace SmbExplorerCompanion.Database.Migrations
{
    [DbContext(typeof(SmbExplorerCompanionDbContext))]
    [Migration("20230731165716_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("PitchTypePlayerSeason", b =>
                {
                    b.Property<int>("PitchTypesId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerSeasonsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PitchTypesId", "PlayerSeasonsId");

                    b.HasIndex("PlayerSeasonsId");

                    b.ToTable("PitchTypePlayerSeason");
                });

            modelBuilder.Entity("PlayerAwardPlayerSeason", b =>
                {
                    b.Property<int>("AwardsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerSeasonsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AwardsId", "PlayerSeasonsId");

                    b.HasIndex("PlayerSeasonsId");

                    b.ToTable("PlayerAwardPlayerSeason");
                });

            modelBuilder.Entity("PlayerSeasonTrait", b =>
                {
                    b.Property<int>("PlayerSeasonsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TraitsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("PlayerSeasonsId", "TraitsId");

                    b.HasIndex("TraitsId");

                    b.ToTable("PlayerSeasonTrait");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId")
                        .IsUnique();

                    b.HasIndex("SeasonTeamHistoryId")
                        .IsUnique();

                    b.ToTable("ChampionshipWinners");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Conference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDesignatedHitter")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Conferences");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Division", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ConferenceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ConferenceId");

                    b.ToTable("Divisions");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Franchise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSmb3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Franchises");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.BatHandedness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("BatHandedness");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Chemistry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Chemistry");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.LookupSeed", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("SeededAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LookupSeeds");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.PitchType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PitchTypes");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.PitcherRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PitcherRoles");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.PlayerAward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Importance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBuiltIn")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PlayerAwards");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.ThrowHandedness", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ThrowHandedness");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Trait", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChemistryId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPositive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsSmb3")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChemistryId");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BatHandednessId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChemistryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsHallOfFamer")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("PitcherRoleId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PrimaryPositionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ThrowHandednessId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BatHandednessId");

                    b.HasIndex("ChemistryId");

                    b.HasIndex("FranchiseId");

                    b.HasIndex("PitcherRoleId");

                    b.HasIndex("PrimaryPositionId");

                    b.HasIndex("ThrowHandednessId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerGameIdHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerGameIdHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChampionshipWinnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Salary")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SecondaryPositionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipWinnerId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("SecondaryPositionId");

                    b.ToTable("PlayerSeasons");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonBattingStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double?>("AbPerHomeRun")
                        .HasColumnType("REAL");

                    b.Property<int>("AtBats")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Babip")
                        .HasColumnType("REAL");

                    b.Property<double?>("BattingAverage")
                        .HasColumnType("REAL");

                    b.Property<int>("CaughtStealing")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Doubles")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Errors")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("ExtraBaseHitPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("ExtraBaseHits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamesBatting")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeRuns")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsRegularSeason")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Iso")
                        .HasColumnType("REAL");

                    b.Property<double?>("Obp")
                        .HasColumnType("REAL");

                    b.Property<double?>("Ops")
                        .HasColumnType("REAL");

                    b.Property<double?>("OpsPlus")
                        .HasColumnType("REAL");

                    b.Property<double?>("PaPerGame")
                        .HasColumnType("REAL");

                    b.Property<int>("PassedBalls")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlateAppearances")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Runs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunsBattedIn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SacrificeFlies")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SacrificeHits")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Singles")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Slg")
                        .HasColumnType("REAL");

                    b.Property<int>("StolenBases")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("StrikeoutPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalBases")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Triples")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WalkPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("Walks")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("Woba")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PlayerSeasonId");

                    b.ToTable("PlayerSeasonBattingStats");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonGameStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Accuracy")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Arm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Contact")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Fielding")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Junk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Power")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Speed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Velocity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerSeasonId")
                        .IsUnique();

                    b.ToTable("PlayerSeasonGameStats");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonPitchingStat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BattersFaced")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("BattingAverageAgainst")
                        .HasColumnType("REAL");

                    b.Property<int>("CompleteGames")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("EarnedRunAverage")
                        .HasColumnType("REAL");

                    b.Property<int>("EarnedRuns")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("EraMinus")
                        .HasColumnType("REAL");

                    b.Property<double?>("Fip")
                        .HasColumnType("REAL");

                    b.Property<double?>("FipMinus")
                        .HasColumnType("REAL");

                    b.Property<int>("GamesFinished")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamesPlayed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GamesStarted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HitByPitch")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Hits")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("HitsPerNine")
                        .HasColumnType("REAL");

                    b.Property<int>("HomeRuns")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("HomeRunsPerNine")
                        .HasColumnType("REAL");

                    b.Property<double?>("InningsPitched")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsRegularSeason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Losses")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("OpponentObp")
                        .HasColumnType("REAL");

                    b.Property<double?>("PitchesPerGame")
                        .HasColumnType("REAL");

                    b.Property<double?>("PitchesPerInning")
                        .HasColumnType("REAL");

                    b.Property<int>("PlayerSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunsAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Saves")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Shutouts")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Strikeouts")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("StrikeoutsPerNine")
                        .HasColumnType("REAL");

                    b.Property<double?>("StrikeoutsPerWalk")
                        .HasColumnType("REAL");

                    b.Property<int>("TotalPitches")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Walks")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WalksPerNine")
                        .HasColumnType("REAL");

                    b.Property<double?>("Whip")
                        .HasColumnType("REAL");

                    b.Property<int>("WildPitches")
                        .HasColumnType("INTEGER");

                    b.Property<double?>("WinPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerSeasonId");

                    b.ToTable("PlayerSeasonPitchingStats");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerTeamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SeasonTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("PlayerSeasonId");

                    b.HasIndex("SeasonTeamHistoryId");

                    b.ToTable("PlayerTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Season", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChampionshipWinnerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NumGamesRegularSeason")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("Budget")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DivisionId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpectedLosses")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExpectedWins")
                        .HasColumnType("INTEGER");

                    b.Property<double>("GamesBehind")
                        .HasColumnType("REAL");

                    b.Property<int>("Losses")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Payroll")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayoffLosses")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayoffRunsAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayoffRunsScored")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayoffSeed")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlayoffWins")
                        .HasColumnType("INTEGER");

                    b.Property<double>("PythagoreanWinPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("RunsAllowed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RunsScored")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Surplus")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SurplusPerGame")
                        .HasColumnType("REAL");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TeamNameHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalAccuracy")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalArm")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalContact")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalFielding")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalJunk")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalPower")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalSpeed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalVelocity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WinPercentage")
                        .HasColumnType("REAL");

                    b.Property<int>("Wins")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DivisionId");

                    b.HasIndex("SeasonId");

                    b.HasIndex("TeamId");

                    b.HasIndex("TeamNameHistoryId");

                    b.ToTable("SeasonTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FranchiseId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("FranchiseId");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamGameIdHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("GameId")
                        .HasColumnType("TEXT");

                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamGameIdHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamLogoHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<byte[]>("LogoFullSize")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("LogoIconSize")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<int>("Order")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("TeamLogoHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamNameHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("TeamLogoHistoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("TeamLogoHistoryId");

                    b.ToTable("TeamNameHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamPlayoffSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwayPitcherSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalGameNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HomePitcherSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AwayPitcherSeasonId");

                    b.HasIndex("AwayTeamHistoryId");

                    b.HasIndex("HomePitcherSeasonId");

                    b.HasIndex("HomeTeamHistoryId");

                    b.ToTable("TeamPlayoffSchedules");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamSeasonSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwayPitcherSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AwayScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("AwayTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Day")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GlobalGameNumber")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HomePitcherSeasonId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("HomeScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HomeTeamHistoryId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AwayPitcherSeasonId");

                    b.HasIndex("AwayTeamHistoryId");

                    b.HasIndex("HomePitcherSeasonId");

                    b.HasIndex("HomeTeamHistoryId");

                    b.ToTable("TeamSeasonSchedules");
                });

            modelBuilder.Entity("PitchTypePlayerSeason", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.PitchType", null)
                        .WithMany()
                        .HasForeignKey("PitchTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", null)
                        .WithMany()
                        .HasForeignKey("PlayerSeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerAwardPlayerSeason", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.PlayerAward", null)
                        .WithMany()
                        .HasForeignKey("AwardsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", null)
                        .WithMany()
                        .HasForeignKey("PlayerSeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PlayerSeasonTrait", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", null)
                        .WithMany()
                        .HasForeignKey("PlayerSeasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.Trait", null)
                        .WithMany()
                        .HasForeignKey("TraitsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Season", "Season")
                        .WithOne("ChampionshipWinner")
                        .HasForeignKey("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", "SeasonId")
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "SeasonTeamHistory")
                        .WithOne("ChampionshipWinner")
                        .HasForeignKey("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", "SeasonTeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("SeasonTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Conference", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Franchise", "Franchise")
                        .WithMany("Conferences")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Division", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Conference", "Conference")
                        .WithMany("Divisions")
                        .HasForeignKey("ConferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Conference");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Trait", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.Chemistry", "Chemistry")
                        .WithMany("Traits")
                        .HasForeignKey("ChemistryId");

                    b.Navigation("Chemistry");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Player", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.BatHandedness", "BatHandedness")
                        .WithMany("Players")
                        .HasForeignKey("BatHandednessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.Chemistry", "Chemistry")
                        .WithMany()
                        .HasForeignKey("ChemistryId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Franchise", "Franchise")
                        .WithMany("Players")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.PitcherRole", "PitcherRole")
                        .WithMany()
                        .HasForeignKey("PitcherRoleId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.Position", "PrimaryPosition")
                        .WithMany("PrimaryPositionPlayers")
                        .HasForeignKey("PrimaryPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.ThrowHandedness", "ThrowHandedness")
                        .WithMany("Players")
                        .HasForeignKey("ThrowHandednessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BatHandedness");

                    b.Navigation("Chemistry");

                    b.Navigation("Franchise");

                    b.Navigation("PitcherRole");

                    b.Navigation("PrimaryPosition");

                    b.Navigation("ThrowHandedness");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerGameIdHistory", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Player", "Player")
                        .WithMany("PlayerGameIdHistory")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeason", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", "ChampionshipWinner")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("ChampionshipWinnerId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Player", "Player")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Season", "Season")
                        .WithMany("PlayerSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Lookups.Position", "SecondaryPosition")
                        .WithMany("SecondaryPositionPlayers")
                        .HasForeignKey("SecondaryPositionId");

                    b.Navigation("ChampionshipWinner");

                    b.Navigation("Player");

                    b.Navigation("Season");

                    b.Navigation("SecondaryPosition");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonBattingStat", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "PlayerSeason")
                        .WithMany("BattingStats")
                        .HasForeignKey("PlayerSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerSeason");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonGameStat", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "PlayerSeason")
                        .WithOne("GameStats")
                        .HasForeignKey("SmbExplorerCompanion.Database.Entities.PlayerSeasonGameStat", "PlayerSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerSeason");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeasonPitchingStat", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "PlayerSeason")
                        .WithMany("PitchingStats")
                        .HasForeignKey("PlayerSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerSeason");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerTeamHistory", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "PlayerSeason")
                        .WithMany("PlayerTeamHistory")
                        .HasForeignKey("PlayerSeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "SeasonTeamHistory")
                        .WithMany("PlayerTeamHistory")
                        .HasForeignKey("SeasonTeamHistoryId");

                    b.Navigation("PlayerSeason");

                    b.Navigation("SeasonTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Season", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Franchise", "Franchise")
                        .WithMany("Seasons")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Division", "Division")
                        .WithMany("SeasonTeamHistories")
                        .HasForeignKey("DivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Season", "Season")
                        .WithMany("SeasonTeamHistory")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.Team", "Team")
                        .WithMany("SeasonTeamHistory")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.TeamNameHistory", "TeamNameHistory")
                        .WithMany("SeasonTeamHistory")
                        .HasForeignKey("TeamNameHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Division");

                    b.Navigation("Season");

                    b.Navigation("Team");

                    b.Navigation("TeamNameHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Team", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Franchise", "Franchise")
                        .WithMany("Teams")
                        .HasForeignKey("FranchiseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Franchise");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamGameIdHistory", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.Team", "Team")
                        .WithMany("TeamGameIdHistory")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamNameHistory", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.TeamLogoHistory", "TeamLogoHistory")
                        .WithMany("TeamNameHistory")
                        .HasForeignKey("TeamLogoHistoryId");

                    b.Navigation("TeamLogoHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamPlayoffSchedule", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "AwayPitcherSeason")
                        .WithMany("AwayPitchingPlayoffSchedule")
                        .HasForeignKey("AwayPitcherSeasonId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "AwayTeamHistory")
                        .WithMany("AwayPlayoffSchedule")
                        .HasForeignKey("AwayTeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "HomePitcherSeason")
                        .WithMany("HomePitchingPlayoffSchedule")
                        .HasForeignKey("HomePitcherSeasonId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "HomeTeamHistory")
                        .WithMany("HomePlayoffSchedule")
                        .HasForeignKey("HomeTeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayPitcherSeason");

                    b.Navigation("AwayTeamHistory");

                    b.Navigation("HomePitcherSeason");

                    b.Navigation("HomeTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamSeasonSchedule", b =>
                {
                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "AwayPitcherSeason")
                        .WithMany("AwayPitchingSchedule")
                        .HasForeignKey("AwayPitcherSeasonId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "AwayTeamHistory")
                        .WithMany("AwaySeasonSchedule")
                        .HasForeignKey("AwayTeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmbExplorerCompanion.Database.Entities.PlayerSeason", "HomePitcherSeason")
                        .WithMany("HomePitchingSchedule")
                        .HasForeignKey("HomePitcherSeasonId");

                    b.HasOne("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", "HomeTeamHistory")
                        .WithMany("HomeSeasonSchedule")
                        .HasForeignKey("HomeTeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AwayPitcherSeason");

                    b.Navigation("AwayTeamHistory");

                    b.Navigation("HomePitcherSeason");

                    b.Navigation("HomeTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.ChampionshipWinner", b =>
                {
                    b.Navigation("PlayerSeasons");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Conference", b =>
                {
                    b.Navigation("Divisions");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Division", b =>
                {
                    b.Navigation("SeasonTeamHistories");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Franchise", b =>
                {
                    b.Navigation("Conferences");

                    b.Navigation("Players");

                    b.Navigation("Seasons");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.BatHandedness", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Chemistry", b =>
                {
                    b.Navigation("Traits");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.Position", b =>
                {
                    b.Navigation("PrimaryPositionPlayers");

                    b.Navigation("SecondaryPositionPlayers");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Lookups.ThrowHandedness", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Player", b =>
                {
                    b.Navigation("PlayerGameIdHistory");

                    b.Navigation("PlayerSeasons");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.PlayerSeason", b =>
                {
                    b.Navigation("AwayPitchingPlayoffSchedule");

                    b.Navigation("AwayPitchingSchedule");

                    b.Navigation("BattingStats");

                    b.Navigation("GameStats")
                        .IsRequired();

                    b.Navigation("HomePitchingPlayoffSchedule");

                    b.Navigation("HomePitchingSchedule");

                    b.Navigation("PitchingStats");

                    b.Navigation("PlayerTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Season", b =>
                {
                    b.Navigation("ChampionshipWinner");

                    b.Navigation("PlayerSeasons");

                    b.Navigation("SeasonTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.SeasonTeamHistory", b =>
                {
                    b.Navigation("AwayPlayoffSchedule");

                    b.Navigation("AwaySeasonSchedule");

                    b.Navigation("ChampionshipWinner");

                    b.Navigation("HomePlayoffSchedule");

                    b.Navigation("HomeSeasonSchedule");

                    b.Navigation("PlayerTeamHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.Team", b =>
                {
                    b.Navigation("SeasonTeamHistory");

                    b.Navigation("TeamGameIdHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamLogoHistory", b =>
                {
                    b.Navigation("TeamNameHistory");
                });

            modelBuilder.Entity("SmbExplorerCompanion.Database.Entities.TeamNameHistory", b =>
                {
                    b.Navigation("SeasonTeamHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
